[#ftl]
[#include "setContext.ftl"]

[#-- Domains --]
[#assign productDomainStem = productObject.Domain.Stem]
[#assign segmentDomainBehaviour = (productObject.Domain.SegmentBehaviour)!""]
[#assign segmentDomainCertificateId = productObject.Domain.Certificate.Id]
[#switch segmentDomainBehaviour]
    [#case "segmentProductInDomain"]
        [#assign segmentDomain = segmentName + "." + productName + "." + productDomainStem]
        [#assign segmentDomainQualifier = ""]
        [#assign segmentDomainCertificateId = segmentDomainCertificateId + "-" + productId + "-" + segmentId]
        [#break]
    [#case "segmentInDomain"]
        [#assign segmentDomain = segmentName + "." + productDomainStem]
        [#assign segmentDomainQualifier = ""]
        [#assign segmentDomainCertificateId = segmentDomainCertificateId + "-" + segmentId]
        [#break]
    [#case "naked"]
        [#assign segmentDomain = productDomainStem]
        [#assign segmentDomainQualifier = ""]
        [#break]
    [#case "segmentInHost"]
        [#assign segmentDomain = productDomainStem]
        [#assign segmentDomainQualifier = "-" + segmentName]
        [#break]
    [#case "segmentProductInHost"]
    [#default]
        [#assign segmentDomain = productDomainStem]
        [#assign segmentDomainQualifier = "-" + segmentName + "-" + productName]
        [#break]
[/#switch]
[#assign segmentDomainCertificateId = segmentDomainCertificateId?replace("-","X")]

[#-- Segment --]
[#assign baseAddress = segmentObject.CIDR.Address?split(".")]
[#assign addressOffset = baseAddress[2]?number*256 + baseAddress[3]?number]
[#assign addressesPerTier = powersOf2[getPowerOf2(powersOf2[32 - segmentObject.CIDR.Mask]/(segmentObject.Tiers.Order?size))]]
[#assign addressesPerZone = powersOf2[getPowerOf2(addressesPerTier / (segmentObject.Zones.Order?size))]]
[#assign subnetMask = 32 - powersOf2?seq_index_of(addressesPerZone)]
[#assign dnsSupport = segmentObject.DNSSupport]
[#assign dnsHostnames = segmentObject.DNSHostnames]
[#assign rotateKeys = (segmentObject.RotateKeys)!true]

[#-- Current bucket naming --]
[#assign operationsBucketSegment = "segment"]
[#assign operationsBucketType = "operations"]
[#assign operationsBucket = operationsBucketType + segmentDomainQualifier + "." + segmentDomain]
[#assign dataBucketSegment = "segment"]
[#assign dataBucketType = "data"]
[#assign dataBucket = dataBucketType + segmentDomainQualifier + "." + segmentDomain]
[#-- Support legacy bucket naming --]
[#if getKey("s3XsegmentXlogs")??]
    [#assign operationsBucketType = "logs"]
[/#if]
[#if getKey("s3XcontainerXlogs")??]
    [#assign operationsBucketSegment = "container"]
    [#assign operationsBucketType = "logs"]
[/#if]
[#if getKey("s3XsegmentXbackups")??]
    [#assign dataBucketType = "backups"]
[/#if]
[#if getKey("s3XcontainerXbackups")??]
    [#assign dataBucketSegment = "container"]
    [#assign dataBucketType = "backups"]
[/#if]
[#-- Support presence of existing s3 buckets --]
[#assign operationsBucket = getKey("s3X" + operationsBucketSegment + "X" + operationsBucketType)!operationsBucket]
[#assign dataBucket = getKey("s3X" + dataBucketSegment + "X" + dataBucketType)!dataBucket]

[#-- Get processor settings --]
[#function getProcessor tier component type]
    [#assign tc = tier.Id + "-" + component.Id]
    [#assign defaultProfile = "default"]
    [#if (component[type].Processor)??]
        [#return component[type].Processor]
    [/#if]
    [#if (processors[solutionObject.CapacityProfile][tc])??]
        [#return processors[solutionObject.CapacityProfile][tc]]
    [/#if]
    [#if (processors[solutionObject.CapacityProfile][type])??]
        [#return processors[solutionObject.CapacityProfile][type]]
    [/#if]
    [#if (processors[defaultProfile][tc])??]
        [#return processors[defaultProfile][tc]]
    [/#if]
    [#if (processors[defaultProfile][type])??]
        [#return processors[defaultProfile][type]]
    [/#if]
[/#function]

{
    "AWSTemplateFormatVersion" : "2010-09-09",
    [#include "templateMetadata.ftl"],
    "Resources" : {
        [#assign resourceCount = 0]
        [#assign segmentListMode="definition"]
        [#include segmentList]                      
    },
    "Outputs" : 
    {
        [#assign resourceCount = 0]
        [#assign segmentListMode="outputs"]
        [#include segmentList]
    }
}






