[#ftl]
[#-- Standard inputs --]
[#assign blueprintObject = blueprint?eval]
[#assign credentialsObject = (credentials?eval).Credentials]
[#assign appSettingsObject = appsettings?eval]
[#assign stackOutputsObject = stackOutputs?eval]

[#-- High level objects --]
[#assign tenantObject = blueprintObject.Tenant]
[#assign accountObject = blueprintObject.Account]
[#assign productObject = blueprintObject.Product]
[#assign solutionObject = blueprintObject.Solution]
[#assign segmentObject = blueprintObject.Segment]
[#assign powersOf2 = blueprintObject.PowersOf2]

[#-- Reference data --]
[#assign regions = blueprintObject.Regions]
[#assign environments = blueprintObject.Environments]
[#assign categories = blueprintObject.Categories]
[#assign routeTables = blueprintObject.RouteTables]
[#assign networkACLs = blueprintObject.NetworkACLs]
[#assign storage = blueprintObject.Storage]
[#assign processors = blueprintObject.Processors]
[#assign ports = blueprintObject.Ports]
[#assign portMappings = blueprintObject.PortMappings]

[#-- Reference Objects --]
[#assign regionId = region]
[#assign regionObject = regions[regionId]]
[#assign accountRegionId = accountRegion]
[#assign accountRegionObject = regions[accountRegionId]]
[#assign productRegionId = productRegion]
[#assign productRegionObject = regions[productRegionId]]
[#assign environmentId = segmentObject.Environment]
[#assign environmentObject = environments[environmentId]]
[#assign categoryId = segmentObject.Category!environmentObject.Category]
[#assign categoryObject = categories[categoryId]]

[#-- Key ids/names --]
[#assign tenantId = tenantObject.Id]
[#assign accountId = accountObject.Id]
[#assign productId = productObject.Id]
[#assign productName = productObject.Name]
[#assign segmentId = segmentObject.Id]
[#assign segmentName = segmentObject.Name]
[#assign environmentName = environmentObject.Name]

[#-- Domains --]
[#assign productDomainStem = productObject.Domain.Stem]
[#assign segmentDomainBehaviour = (productObject.Domain.SegmentBehaviour)!""]
[#assign segmentDomainCertificateId = productObject.Domain.Certificate.Id]
[#switch segmentDomainBehaviour]
    [#case "segmentProductInDomain"]
        [#assign segmentDomain = segmentName + "." + productName + "." + productDomainStem]
        [#assign segmentDomainQualifier = ""]
        [#assign segmentDomainCertificateId = segmentDomainCertificateId + "-" + productId + "-" + segmentId]
        [#break]
    [#case "segmentInDomain"]
        [#assign segmentDomain = segmentName + "." + productDomainStem]
        [#assign segmentDomainQualifier = ""]
        [#assign segmentDomainCertificateId = segmentDomainCertificateId + "-" + segmentId]
        [#break]
    [#case "naked"]
        [#assign segmentDomain = productDomainStem]
        [#assign segmentDomainQualifier = ""]
        [#break]
    [#case "segmentInHost"]
        [#assign segmentDomain = productDomainStem]
        [#assign segmentDomainQualifier = "-" + segmentName]
        [#break]
    [#case "segmentProductInHost"]
    [#default]
        [#assign segmentDomain = productDomainStem]
        [#assign segmentDomainQualifier = "-" + segmentName + "-" + productName]
        [#break]
[/#switch]
[#assign segmentDomainCertificateId = segmentDomainCertificateId?replace("-","X")]

[#-- Buckets --]
[#assign credentialsBucket = getKey("s3XaccountXcredentials")!"unknown"]
[#assign codeBucket = getKey("s3XaccountXcode")!"unknown"]

[#-- Get stack output --]
[#function getKey key]
    [#list stackOutputsObject as pair]
        [#if pair.OutputKey==key]
            [#return pair.OutputValue]
        [/#if]
    [/#list]
[/#function]

[#-- Calculate the closest power of 2 --]
[#function getPowerOf2 value]
    [#assign exponent = -1]
    [#list powersOf2 as powerOf2]
        [#if powerOf2 <= value]
            [#assign exponent = powerOf2?index]
        [#else]
            [#break]
        [/#if]
    [/#list]
    [#return exponent]
[/#function]

[#-- Segment --]
[#assign baseAddress = segmentObject.CIDR.Address?split(".")]
[#assign addressOffset = baseAddress[2]?number*256 + baseAddress[3]?number]
[#assign addressesPerTier = powersOf2[getPowerOf2(powersOf2[32 - segmentObject.CIDR.Mask]/(segmentObject.Tiers.Order?size))]]
[#assign addressesPerZone = powersOf2[getPowerOf2(addressesPerTier / (segmentObject.Zones.Order?size))]]
[#assign subnetMask = 32 - powersOf2?seq_index_of(addressesPerZone)]

[#assign internetAccess = segmentObject.InternetAccess]
[#assign dnsSupport = segmentObject.DNSSupport]
[#assign dnsHostnames = segmentObject.DNSHostnames]
[#assign jumpServer = internetAccess && segmentObject.NAT.Enabled]
[#assign jumpServerPerAZ = jumpServer && segmentObject.NAT.MultiAZ]
[#assign sshPerSegment = segmentObject.SSHPerSegment]
[#assign rotateKeys = (segmentObject.RotateKeys)!true]
[#-- Current bucket naming --]
[#assign operationsBucketSegment = "segment"]
[#assign operationsBucketType = "operations"]
[#assign operationsBucket = operationsBucketType + segmentDomainQualifier + "." + segmentDomain]
[#assign dataBucketSegment = "segment"]
[#assign dataBucketType = "data"]
[#assign dataBucket = dataBucketType + segmentDomainQualifier + "." + segmentDomain]
[#-- Support legacy bucket naming --]
[#if getKey("s3XsegmentXlogs")??]
    [#assign operationsBucketType = "logs"]
[/#if]
[#if getKey("s3XcontainerXlogs")??]
    [#assign operationsBucketSegment = "container"]
    [#assign operationsBucketType = "logs"]
[/#if]
[#if getKey("s3XsegmentXbackups")??]
    [#assign dataBucketType = "backups"]
[/#if]
[#if getKey("s3XcontainerXbackups")??]
    [#assign dataBucketSegment = "container"]
    [#assign dataBucketType = "backups"]
[/#if]
[#-- Support presence of existing s3 buckets --]
[#assign operationsBucket = getKey("s3X" + operationsBucketSegment + "X" + operationsBucketType)!operationsBucket]
[#assign dataBucket = getKey("s3X" + dataBucketSegment + "X" + dataBucketType)!dataBucket]

[#assign operationsExpiration = (segmentObject.Operations.Expiration)!(environmentObject.Operations.Expiration)]
[#assign dataExpiration = (segmentObject.Data.Expiration)!(environmentObject.Data.Expiration)]

[#-- Required tiers --]
[#function isTier tierId]
    [#return (blueprintObject.Tiers[tierId])??]
[/#function]

[#function getTier tierId]
    [#return blueprintObject.Tiers[tierId]]
[/#function]

[#assign tiers = []]
[#list segmentObject.Tiers.Order as tierId]
    [#if isTier(tierId)]
        [#assign tier = getTier(tierId)]
        [#if tier.Components??
            || ((tier.Required)?? && tier.Required)
            || (jumpServer && (tierId == "mgmt"))]
            [#assign tiers += [tier + 
                {"Index" : tierId?index}]]
        [/#if]
    [/#if]
[/#list]

[#-- Required zones --]
[#assign zones = []]
[#list segmentObject.Zones.Order as zoneId]
    [#if regions[region].Zones[zoneId]??]
        [#assign zone = regions[region].Zones[zoneId]]
        [#assign zones += [zone +  
            {"Index" : zoneId?index}]]
    [/#if]
[/#list]

[#-- Get processor settings --]
[#function getProcessor tier component type]
    [#assign tc = tier.Id + "-" + component.Id]
    [#assign defaultProfile = "default"]
    [#if (component[type].Processor)??]
        [#return component[type].Processor]
    [/#if]
    [#if (processors[solutionObject.CapacityProfile][tc])??]
        [#return processors[solutionObject.CapacityProfile][tc]]
    [/#if]
    [#if (processors[solutionObject.CapacityProfile][type])??]
        [#return processors[solutionObject.CapacityProfile][type]]
    [/#if]
    [#if (processors[defaultProfile][tc])??]
        [#return processors[defaultProfile][tc]]
    [/#if]
    [#if (processors[defaultProfile][type])??]
        [#return processors[defaultProfile][type]]
    [/#if]
[/#function]





